{ //Rooms can be created
    a: Log In
    b: Log In
    a: Max Players(5) -> Create Room
    a: EXPECT play room screen
    b: EXPECT live update in rooms
}

{ //Rooms can be joined and left
    a: Log In
    b: Log In
    c: Log In
    a: Max Players(5) -> Create Room
    c: Expect live update in rooms
    b: Join Room
    c: EXPECT live update in rooms
    b: Leave Room
    c: EXPECT live update in rooms
}

{ //Rooms can be destroyed
    a: Log In
    b: Log In
    c: Log In
    a: Max Players(5) -> Create Room
    c: Expect live update in rooms
    b: Join Room
    c: EXPECT live update in rooms
    b: Leave Room
    c: EXPECT live update in rooms
    a: Close room
    c: Expect room to disappear
}


{ //Messages are only sent to those who are in the room
    a: Log In
    b: Log In
    c: Log In
    d: Log In
    a: Max Players(2) -> Create Room *roomA
    b: Join Room *roomA
    c: Max Players(2) -> Create Room *roomB
    d: Join Room *roomA
    a: Send Message *messageC
    c: Send Message *messageD
    b: EXPECT *messageC && ~*messageD
    d: EXPECT *messageD && ~*messageC
}

{ //Game states are passed back and forth, with the 3 changes limit
    a: Log In
    b: Log In
    a: Max Players(3) -> Create Room *roomA
    b: Join Room *roomA
    b: EXPECT TO BE FROZEN
    a: Make changes
    a: Submit Turn
    a: EXPECT TO BE FROZEN
    b: EXPECT TO UNFREEZE
    b: EXPECT TO SEE CHANGES
    b: EXPECT TO UPDATE CURRENT PLAYERS DISPLAY
    b: Make changes
    b: Submit Turn
    b: EXPECT TO BE FROZEN
    a: EXPECT TO UNFREEZE
    a: EXPECT TO SEE CHANGES
    a: EXPECT TO UPDATE CURRENT PLAYERS DISPLAY
}

// Test current player display on player leave

// Test limited number of moves

// Test history display